workflow:
  name: "reporter-briefing"
  title: "Reporter Briefing"
  description: "Workflow to produce briefing in English."
  context-variables:
    debugger:
      enabled: true
    api-perplexity:
      basicAuth: "$TEMP_CONTEXT_VARIABLE_PERPLEXITY_API_KEY"
    api-sportingbet:
      Bwin-AccessId: "$TEMP_CONTEXT_VARIABLE_BWIN_ACCESS_ID"
      Bwin-AccessIdToken: "$TEMP_CONTEXT_VARIABLE_BWIN_ACCESS_ID_TOKEN"
    sdk-openai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
  inputs:
    event_code: "$.get('event_code') or None"
    perplexity_model: "$.get('perplexity_model', 'llama-3.1-sonar-small-128k-online')"
    perplexity_max_tokens: "$.get('perplexity_max_tokens', 10000)"
    perplexity_top_p: "$.get('perplexity_top_p', 0.9)"
    perplexity_temperature: "$.get('perplexity_temperature', 0.2)"
    system_message: "$.get('system_message', 'Please create a comprehensive pre-match report focused on the specified team. Include: - Recent team form and performance trends - Key player statistics and notable performances - Historical performance against the upcoming opponent - Significant team records and milestones that could be achieved in this match - Injury updates and expected lineup changes - Teams playing style and tactical approaches - Notable achievements and records from this season - Any relevant historical context or interesting facts about the team. Focus on information that provides valuable context for the upcoming match.')"
  outputs:
    events: "$.get('events')"
    workflow-status: "$.get('selected-fixture-exists') is not True and ($.get('event_exists') is not True and 'skipped' or 'failed') or 'executed'"
  tasks:
    
    # 0 load-event-by-code
    - type: "document"
      name: "load-event-by-code"
      description: "Search event (sportradar) by code."
      condition: "$.get('event_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["updated", 1]
      filters:
        value.sport_event.id: "$.get('event_code')"
      outputs:
        event_exists: "len($.get('documents', [])) > 0"
        event_selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        reporter_briefing_count: "$.get('documents')[0].get('value', {}).get('version_control', {}).get('reporter_briefing_count', 0) if $.get('documents') else None"
        title: "$.get('documents')[0].get('value').get('title') if $.get('documents') else None"

    # 1 load-event-by-schedule
    - type: "document"
      name: "load-event-by-schedule"
      description: "Search for schedule events (sportradar)."
      condition: "$.get('event_exists') is not True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      filters:
        value.sport_event_status.status: "{'$in': ['not_started', 'live']}"
        value.start_time: "{'$lt': datetime.utcnow() + timedelta(hours=72)}"
        value.version_control.processing: "{'$ne': True}"
        value.version_control.reporter_briefing_status: "{'$exists': False}"
        # value.version_control.updated: "{'$lt': datetime.utcnow() - timedelta(minutes=2)}"
      inputs:
        name: "'schedule'"
      outputs:
        event_code: "$.get('documents')[0].get('value').get('sport_event', {}).get('id') if $.get('documents') else None"
        event_exists: "len($.get('documents', [])) > 0"
        event_selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        reporter_briefing_count: "$.get('documents')[0].get('value', {}).get('version_control', {}).get('reporter_briefing_count', 0) if $.get('documents') else None"
        title: "$.get('documents')[0].get('value').get('title') if $.get('documents') else None"

    # 2 version-control-update
    - type: "document"
      name: "version-control-update"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        schedule: |
          {
            **$.get('event_selected'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'processing': True,
              'reporter_briefing_status': 'processing'
            }
          }
      metadata:
        event_code: "$.get('event_code')"

    # 3 load-fixture-by-similarity
    - type: "document"
      name: "load-fixture-by-similarity"
      description: "Load fixture (from sportingbet) by title similarity."
      config:
        action: "search"
        threshold-docs: 1
        threshold-similarity: 0.10
        search-limit: 100
        search-vector: true
      condition: "$.get('event_exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      inputs:
        name: "'game-fixture'"
        search-limit: "'100'"
        search-query: "$.get('title')"
      outputs:
        selected-fixture: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        selected-fixture-exists: "len($.get('documents', [])) > 0"
        selected-fixture-title: "$.get('documents')[0].get('value', {}).get('title') if $.get('documents') else None"
        selected-fixture-id: "$.get('documents')[0].get('value', {}).get('id', {}).get('entityId') if $.get('documents') else None"
        similarity-score: "$.get('documents')[0].get('similarity') if $.get('documents') else None"

    # # 3 research-team-news (home team)
    # - type: "connector"
    #   name: "fetch-perplexity-api"
    #   condition: "$.get('event_exists') is True"
    #   connector:
    #     name: "api-perplexity"
    #     command: "post-chat/completions"
    #   inputs:
    #     body: |
    #       {
    #         'model': $.get('perplexity_model'),
    #         'messages': [
    #           {
    #             'role': 'system',
    #             'content': $.get('system_message')
    #           },{
    #             'role': 'user',
    #             'content': f"Create a news report about the {$.get('event_selected').get('sport_event', {}).get('competitors', [])[0].get('name')} team in the {$.get('event_selected').get('sport_event', {}).get('sport_event_context', []).get('competition', {}).get('name')}"
    #           }
    #         ],
    #         'max_tokens': $.get('perplexity_max_tokens'),
    #         'temperature': $.get('perplexity_temperature'),
    #         'top_p': $.get('perplexity_top_p'),
    #         'return_citations': $.get('return_citations', True),
    #         'return_images': $.get('return_images', False),
    #         'return_related_questions': $.get('return_related_questions', True),
    #         'search_recency_filter': $.get('search_recency_filter', 'week'),
    #         'top_k': $.get('top_k', 0),
    #         'stream': $.get('stream', False),
    #         'presence_penalty': $.get('presence_penalty', 0),
    #         'frequency_penalty': $.get('frequency_penalty', 1)
    #       }
    #   outputs:
    #     result-home-news: "$.get('choices')[0].get('message').get('content')"

    # # 4 research-team-news (away team)
    # - type: "connector"
    #   name: "fetch-perplexity-api"
    #   condition: "$.get('event_exists') is True"
    #   connector:
    #     name: "api-perplexity"
    #     command: "post-chat/completions"
    #   inputs:
    #     body: |
    #       {
    #         'model': $.get('perplexity_model'),
    #         'messages': [
    #           {
    #             'role': 'system',
    #             'content': $.get('system_message')
    #           },{
    #             'role': 'user',
    #             'content': f"Create a news report about the {$.get('event_selected').get('sport_event', {}).get('competitors', [])[1].get('name')} team in the {$.get('event_selected').get('sport_event', {}).get('sport_event_context', []).get('competition', {}).get('name')}"
    #           }
    #         ],
    #         'max_tokens': $.get('perplexity_max_tokens'),
    #         'temperature': $.get('perplexity_temperature'),
    #         'top_p': $.get('perplexity_top_p'),
    #         'return_citations': $.get('return_citations', True),
    #         'return_images': $.get('return_images', False),
    #         'return_related_questions': $.get('return_related_questions', True),
    #         'search_recency_filter': $.get('search_recency_filter', 'week'),
    #         'top_k': $.get('top_k', 0),
    #         'stream': $.get('stream', False),
    #         'presence_penalty': $.get('presence_penalty', 0),
    #         'frequency_penalty': $.get('frequency_penalty', 1)
    #       }
    #   outputs:
    #     result-away-news: "$.get('choices')[0].get('message').get('content')"
    
    # 4 research-game-news
    - type: "connector"
      name: "fetch-perplexity-api"
      condition: "$.get('event_exists') is True"
      connector:
        name: "api-perplexity"
        command: "post-chat/completions"
      inputs:
        body: |
          {
            'model': $.get('perplexity_model'),
            'messages': [
              {
                'role': 'system',
                'content': $.get('system_message')
              },{
                'role': 'user',
                'content': f"Create a news report about the game {$.get('title')}"
              }
            ],
            'max_tokens': $.get('perplexity_max_tokens'),
            'temperature': $.get('perplexity_temperature'),
            'top_p': $.get('perplexity_top_p'),
            'return_citations': $.get('return_citations', True),
            'return_images': $.get('return_images', False),
            'return_related_questions': $.get('return_related_questions', True),
            'search_recency_filter': $.get('search_recency_filter', 'week'),
            'top_k': $.get('top_k', 0),
            'stream': $.get('stream', False),
            'presence_penalty': $.get('presence_penalty', 0),
            'frequency_penalty': $.get('frequency_penalty', 1)
          }
      outputs:
        result-game-news: "$.get('choices')[0].get('message').get('content')"

    # 5 research-home-news-rating (home team)
    - type: "prompt"
      name: "research-team-news"
      description: "Generate research team news."
      condition: "$.get('event_exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        title: "$.get('title')"
        team: "$.get('event_selected').get('sport_event', {}).get('competitors', [])[0]"
        news: "$.get('result-home-news')"
      outputs:
        research-game-news: "$"

    # 6 research-away-news-rating (away team)
    - type: "prompt"
      name: "research-team-news"
      description: "Generate research team news."
      condition: "$.get('event_exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        title: "$.get('title')"
        team: "$.get('event_selected').get('sport_event', {}).get('competitors', [])[1]"
        news: "$.get('result-away-news')"
      outputs:
        research-game-news: "$"

    # 4 verify-selected-fixture
    - type: "prompt"
      name: "verify-selected-fixture"
      description: "Verify the selected fixture."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        scheduled-item-title: "$.get('title')"
        selected-fixture-title: "$.get('selected-fixture-title')"
        similarity-score: "$.get('similarity-score', 0)"
      outputs:
        is-match: "$.get('is-match')"

    # 5 load-market-by-fixture
    - type: "connector"
      name: "load-market-by-fixture"
      description: "Get a market by fixture from Sportingbet"
      connector:
        name: "api-sportingbet"
        command: "get-offer/api/{sportId}/{country}/fixtures"
        command_attribute:
          country: "'br'"
          sportId: "'4'"
      inputs:
        fixtureIds: "$.get('selected-fixture-id')" 
      outputs:
        markets: "$.get('items', [])[0].get('markets', [])"
        bulk-markets: |
          [
            {
              **m,
              'title': f"$.(title) - {m.get('name', {}).get('shortText')}"
            }
            for m in $.get('items', [])[0].get('markets', [])
            if m.get('marketType') == 'Over/Under' or m.get('marketSubType') == '2Up3wayPricing'
          ]

    # 7 research-match-odds
    - type: "prompt"
      name: "research-match-odds"
      description: "Research match odds."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        title: "$.get('title')"
        markets: "$.get('bulk-markets')"
      outputs:
        research-match-odds: "$"

    # 3 prompt-reporter-preview-br
    - type: "prompt"
      name: "prompt-reporter-preview-br"
      description: "Generate a preview for the upcoming game"
      condition: "$.get('event_exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        start_time: "$.get('event-selected').get('start_time')"
        content-snippets: |
          [
            *$.get('research-home-news', {}).get('snippets', []),
            *$.get('research-away-news', {}).get('snippets', []),
            *$.get('research-match-odds', {}).get('snippets', [])
          ]
      outputs:
        content-preview-br: "$"

    # 4 update-event-preview-br
    - type: "document"
      name: "update-event-preview-br"
      description: "Update the document."
      condition: "$.get('event_exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        content-preview: |
          {
            **$.get('content-preview-br', {}),
            'execution': datetime.utcnow(),
            'status': 'active'
          }
      metadata:
        document_type: "'content-preview'"
        event_code: "$.get('event_code')"
        language: "'br'"

    # 8 version-control-success
    - type: "document"
      name: "version-control-success"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        schedule: |
          {
            **$.get('event_selected'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'game-fixture-id': $.get('selected-fixture-id'),
              'processing': False,
              'reporter_briefing_count': $.get('reporter_briefing_count', 0) + 1,
              'reporter_briefing_status': 'processed',
              'updated': datetime.utcnow()
            }
          }
      metadata:
        event_code: "$.get('event_code')"

    # 9 version-control-failure
    - type: "document"
      name: "version-control-failure"
      description: "Update the events document version control."
      condition: "$.get('event_exists') is True and $.get('selected-fixture-exists') is False"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        schedule: |
          {
            **$.get('event_selected'),
            'version_control': {
              **$.get('event_selected').get('version_control', {}),
              'processing': False,
              'reporter_briefing_failed': $.get('reporter_briefing_count', 0) + 1,
              'updated': datetime.utcnow()
            }
          }
      metadata:
        event_code: "$.get('event_code')"
