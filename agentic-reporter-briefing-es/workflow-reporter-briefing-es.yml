workflow:
  name: "workflow-reporter-briefing-es"
  title: "Reporter Briefing Spanish"
  description: "Workflow to produce briefing in Spanish."
  context-variables:
    sdk-openai:
      api_key: "$TEMP_CONTEXT_VARIABLE_SDK_OPENAI_API_KEY"
  inputs:
    event_code: "$.get('event_code') or None"
  outputs:
    events: "$.get('events')"
    workflow-status: "$.get('event-exists') is not True and 'skipped' or 'executed'"
  tasks:
    # 0 load-event-by-code
    - type: "document"
      name: "load-event-by-code"
      description: "Search for events in the database."
      condition: "$.get('event_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
        search-sorters: ["updated", 1]
      filters:
        value.sport_event.id: "$.get('event_code')"
      outputs:
        event-exists: "len($.get('documents', [])) > 0"
        event-selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        reporter_briefing_count: "$.get('documents')[0].get('value', {}).get('version_control', {}).get('reporter_briefing_count', 0) if $.get('documents') else None"
        season_code: "$.get('documents')[0].get('value', {}).get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('id', '') if $.get('documents') else None"
        title: "$.get('documents')[0].get('value').get('title') if $.get('documents') else None"
    # 1 load-event
    - type: "document"
      name: "load-event-prelive"
      description: "Search for events in the database."
      condition: "$.get('event-exists') is not True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      filters:
        value.sport_event_status.status: "{'$in': ['not_started', 'live']}"
        value.version_control.reporter_briefing_es_status: "{'$exists': False}"
        value.version_control.reporter_web_status: "'processed'"
        value.start_time: "{'$lt': datetime.utcnow() + timedelta(hours=72)}"
        value.processing: "{'$ne': True}"
      inputs:
        name: "'schedule'"
      outputs:
        event_code: "$.get('documents')[0].get('value').get('sport_event', {}).get('id') if $.get('documents') else None"
        event-exists: "len($.get('documents', [])) > 0"
        event-selected: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
        reporter_briefing_count: "$.get('documents')[0].get('value', {}).get('version_control', {}).get('reporter_briefing_count', 0) if $.get('documents') else None"
        season_code: "$.get('documents')[0].get('value', {}).get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('id', '') if $.get('documents') else None"
        title: "$.get('documents')[0].get('value').get('title') if $.get('documents') else None"
    # 1 update-event-status
    - type: "document"
      name: "update-event-preevent-start"
      description: "Update the events document preevent."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        schedule: |
          {
            **$.get('event-selected'),
            'processing': True,
            'version_control': {
              **$.get('event-selected').get('version_control', {}),
              'reporter_briefing_es_status': 'processing'
            }
          }
      metadata:
        event_code: "$.get('event_code')"
    # 2 load-standings
    - type: "document"
      name: "load-season-standings"
      description: "Load for the season standings"
      condition: "$.get('event-exists') is True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      filters:
        value.sid: "$.get('season_code')"
      inputs:
        name: "'standings'"
      outputs:
        standings: "[d.get('standings') for d in [group for group in $.get('documents', [{}])[0].get('value', {}).get('data', [])[0].get('groups', [])]][0]"
        standings-exist: "len($.get('documents')) > 0"
    # 3 load-event-summary-en-us
    - type: "document"
      name: "load-event-summary-en-us"
      description: "Load the events document summary."
      condition: "$.get('event-exists') is True"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      filters:
        metadata: |
          {
            'document_type': 'event-summary',
            'event_code': $.get('event_code'),
            'season_code': $.get('season_code'),
            'language': 'en-us'
          }
      inputs:
        name: "'event-summary'"
      outputs:
        event-summary-en-us: "$.get('documents')[0].get('value', {}) if $.get('documents') else None"
    # 4 fetch-event-summary
    - type: "connector"
      name: "fetch-event-summary"
      description: "Get Sport_Events/Summary from SportRadar"
      condition: "$.get('event-exists') is True"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-sport_events/{event_code}/{data_type}"
        command_attribute:
          data_type: "'summary.json'"
          event_code: "$.get('event_code')"
      inputs:
        api_key: "$.get('sportradar_api_key')"
      outputs:
        event-summary: "$"
        event-status: "$.get('sport_event_status', {}).get('status', '')"
        match-status: "$.get('sport_event_status', {}).get('match_status', '')"
        round-title: f"{$.get('sport_event', {}).get('sport_event_context', {}).get('category', {}).get('name', '')} {$.get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('name', '')}"
        round-number: "$.get('sport_event', {}).get('sport_event_context', {}).get('round', {}).get('number', '')"
        team-away: "next(item for item in $.get('sport_event').get('competitors') if item['qualifier'] == 'away')"
        team-home: "next(item for item in $.get('sport_event').get('competitors') if item['qualifier'] == 'home')"
    # 5 prompt-briefing-en-us
    - type: "prompt"
      name: "prompt-content-match-briefing-en-us"
      description: "Summarize the Briefing for the upcoming game"
      condition: "$.get('event-exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        competitors: "$.get('event-summary').get('sport_event').get('competitors')"
        sport_event_conditions: "$.get('event-summary').get('sport_event').get('sport_event_conditions')"
        sport_event_context: "$.get('event-summary').get('sport_event').get('sport_event_context')"
        start_time: "$.get('event-summary').get('sport_event').get('start_time')"
        venue: "$.get('event-summary').get('sport_event').get('venue')"
      outputs:
        bulk-briefing-en-us: |
          [
            {
              'subject': c.get('title', ''),
              'text': c.get('content', ''),
              'title': f"$.(title) - {c.get('title', '')}",
              'metadata': {
                'event_code': '$.(event_code)',
                'language': 'en-us'
              }
            }
            for c in $.get('sections')
          ]
        content-briefing-en-us: "$"
    # 5 prompt-standings-en-us
    - type: "prompt"
      name: "prompt-content-standings"
      description: "Summarize the Standings for the teams"
      condition: "$.get('event-exists') is True"
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        standings: "$.get('standings')"
        team-home: "$.get('team-home')"
        team-away: "$.get('team-away')"
      outputs:
        bulk-standings-en-us: |
          [
            {
              'subject': 'Standings Home',
              'text': $.get('standings-home', {}),
              'title': f"$.(title) - Standings Home",
              'metadata': {
                'event_code': '$.(event_code)',
                'language': 'en-us'
              }
            },
            {
              'subject': 'Standings Away',
              'text': $.get('standings-away', {}),
              'title': f"$.(title) - Standings Away",
              'metadata': {
                'event_code': '$.(event_code)',
                'language': 'en-us'
              }
            }
          ]
        content-standings-en-us: "$"
    # 7 prompt-content-web-search
    - type: "prompt"
      name: "prompt-content-web-search"
      condition: "$.get('event-exists') is True and $.get('enable-websearch') is True"
      description: "Generate a web search summary for a upcoming game."
      connector:
        name: "sdk-openai"
        command: "invoke_prompt"
        model: "gpt-4o"
      inputs:
        web-search-results: |
          {
            "results": [
              {
                "title": "Match Preview",
                "content": $.get('search-results', None)
              }
            ],
            "title": $.get('title'),
            "team-home": $.get('team-home'),
            "team-away": $.get('team-away')
          }
      outputs:
        bulk-web-search-en-us: |
          [
            {
              'subject': c.get('title', ''),
              'text': c.get('content', ''),
              'title': f"$.(title) - {c.get('title', '')}",
              'metadata': {
                'event_code': '$.(event_code)',
                'language': 'en-us'
              }
            }
            for c in $.get('results', [])
          ]
        web-search-snippets: "$"
    # 8 document-update-en-us
    - type: "document"
      name: "document-update-en-us"
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        content-briefing: |
          {
            **$.get('content-briefing-en-us'),
            'title': $.get('title'),
            'team-home': $.get('team-home'),
            'team-away': $.get('team-away')
          }
        content-news: |
          {
            **$.get('web-search-snippets'),
            "title": $.get('title'),
            "team-home": $.get('team-home'),
            "team-away": $.get('team-away')
          }
        content-standings: |
          {
            **$.get('content-standings-en-us'),
            'title': $.get('title'),
            'team-home': $.get('team-home'),
            'team-away': $.get('team-away')
          }
      metadata:
        event_code: "$.get('event_code')"
        language: "'en-us'"
    # 8 bulk-save-snippets
    - type: "document"
      name: "bulk-save-snippets"
      condition: "$.get('event-exists') is True"
      description: "Bulk save the snippets."
      config:
        action: "bulk-save"
        embed-vector: true
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "content-snippet"
      documents:
        items: "$.get('parsed-items')"
      inputs:
        parsed-items: |
          [
            *$.get('bulk-briefing-en-us', []),
            *$.get('bulk-standings-en-us', []),
            *$.get('bulk-web-search-en-us', []),
          ]
    # 9 update-event-summary (en-us)
    - type: "document"
      name: "update-event-summary-en-us"
      description: "Update the events document."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        event-summary: |
          {
            **$.get('event-summary-en-us', {}),
            'execution': datetime.utcnow(),
            'event-summary': $.get('event-summary'),
            'event-status': $.get('event-status'),
            'match-status': $.get('match-status'),
            'standings': $.get('content-standings-en-us'),
            'team-away': $.get('team-away'),
            'team-home': $.get('team-home'),
            'processed': False,
            'title': $.get('title'),
            'status': 'active'
          }
      metadata:
        document_type: "'event-summary'"
        event_code: "$.get('event_code')"
        season_code: "$.get('season_code')"
        language: "'en-us'"
    # 10 update-event-preevent
    - type: "document"
      name: "update-event-preevent-end"
      description: "Update the events document preevent."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      documents:
        schedule: |
          {
            **$.get('event-selected'),
            'processing': False,
            'version_control': {
              **$.get('event-selected').get('version_control', {}),
              'reporter_briefing_count': $.get('reporter_briefing_count', 0) + 1,
              'reporter_briefing_es_status': 'processed',
              'updated': datetime.utcnow()
            }
          }
      metadata:
        event_code: "$.get('event-selected').get('sport_event', {}).get('id')"
