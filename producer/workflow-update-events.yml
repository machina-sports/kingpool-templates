workflow:
  name: "workflow-update-events"
  title: "Update Events"
  description: "Workflow to synchronize a season events from SportRadar API to Machina."
  context-variables:
    api-sr-soccer-v4:
      api_key: "$TEMP_CONTEXT_VARIABLE_SPORTRADAR_SOCCER_V4_API_KEY"
  inputs:
    event_code: "$.get('event_code', None)"
    param_code: "$.get('item', {}).get('event', {}).get('value', {}).get('sport_event', {}).get('id', None)"
  outputs:
    event: "$.get('event')"
    event-exists: "$.get('event-exists')"
    event-summary: "$.get('event-summary')"
    event-status: "$.get('event-status')"
    event-lineups: "$.get('event-lineups')"
    event-timeline: "$.get('event-timeline')"
    match-status: "$.get('match-status')"
  tasks:

    # content-search-events
    - type: "document"
      name: "load-event-schedule"
      description: "Search for events in the database."
      condition: "$.get('event_code') is not None or $.get('param_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        value.sport_event.id: "$.get('event_code', None) or $.get('param_code')"
      inputs:
        name: "'schedule'"
      outputs:
        event: "$.get('documents')[0] if $.get('documents') else None"
        event-exists: "len($.get('documents')) > 0"
        execution_count: "$.get('documents')[0].get('value', {}).get('execution_count', 0)"

    # update-event-schedule
    - type: "document"
      name: "update-event-schedule"
      description: "Update the events document schedule."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        schedule: |
          {
            **$.get('event').get('value', {}),
            'execution_time': datetime.utcnow(),
            'processing': True
          }
      metadata:
        event_code: "$.get('event_code') or $.get('param_code')"

    # fetch-event-summary
    - type: "connector"
      name: "fetch-event-summary"
      description: "Get Sport_Events/Summary from SportRadar"
      condition: "$.get('event-exists') is True"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-sport_events/{event_code}/{data_type}"
        command_attribute:
          data_type: "'summary.json'"
          event_code: "$.get('event_code') or $.get('param_code')"
      inputs:
        api_key: "$.get('api_key')"
      outputs:
        event-summary: "$"
        event-status: "$.get('sport_event_status', {}).get('status', '')"
        match-status: "$.get('sport_event_status', {}).get('match_status', '')"
        round-title: f"{$.get('sport_event', {}).get('sport_event_context', {}).get('category', {}).get('name', '')} {$.get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('name', '')}"
        round-number: "$.get('sport_event', {}).get('sport_event_context', {}).get('round', {}).get('number', '')"
        season_code: "$.get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('id', '')"
        team-away: "next(item for item in $.get('sport_event').get('competitors') if item['qualifier'] == 'away')"
        team-home: "next(item for item in $.get('sport_event').get('competitors') if item['qualifier'] == 'home')"

    # fetch-event-lineups
    - type: "connector"
      name: "fetch-event-lineups"
      description: "Get Sport_Events/Lineups from SportRadar"
      condition: "$.get('event-exists') is True and $.get('event-status') != 'not_started'"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-sport_events/{event_code}/{data_type}"
        command_attribute:
          data_type: "'lineups.json'"
          event_code: "$.get('event_code', None) or $.get('param_code')"
      inputs:
        api_key: "$.get('api_key')"
      outputs:
        event-lineups: "$.get('lineups')"

    # fetch-event-timeline
    - type: "connector"
      name: "fetch-event-timeline"
      description: "Get Sport_Events/Timeline from SportRadar"
      condition: "$.get('event-exists') is True and $.get('event-status') != 'not_started'"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-sport_events/{event_code}/{data_type}"
        command_attribute:
          data_type: "'timeline.json'"
          event_code: "$.get('event_code', None) or $.get('param_code')"
      inputs:
        api_key: "$.get('api_key')"
      outputs:
        event-timeline: "$.get('timeline')"

    # content-search-standings
    - type: "document"
      name: "load-season-standings"
      description: "Load for the season standings"
      condition: "$.get('event_code') is not None or $.get('season_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        value.sid: "$.get('season_code')"
      inputs:
        name: "'standings'"
      outputs:
        standings: "[d.get('standings') for d in [group for group in $.get('documents', [{}])[0].get('value', {}).get('data', [])[0].get('groups', [])]][0]"
        standings-exist: "len($.get('documents')) > 0"

    # content-search-probabilities
    - type: "document"
      name: "load-season-probabilities"
      description: "Load for the season probabilities"
      condition: "$.get('event_code') is not None or $.get('season_code') is not None"
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        value.sport_event.id: "$.get('event_code') or $.get('param_code')"
      inputs:
        name: "'probabilities'"
      outputs:
        # probabilities: "[p for p in $.get('documents')[0].get('value').get('data', []) if p.get('sport_event').get('id') == $.get('event_code')]"
        # probabilities: "[p for p in $.get('documents')[0].get('value').get('data', [])]"
        probabilities: "$.get('documents')[0].get('value').get('markets', [])"
        probabilities-exist: "len($.get('documents')) > 0"

    # update-event-summary
    - type: "document"
      name: "update-event-summary"
      description: "Update the events document."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        event-summary: |
          {
            'execution': datetime.utcnow(),
            'event-summary': $.get('event-summary'),
            'event-lineups': $.get('event-lineups'),
            'event-timeline': $.get('event-timeline'),
            'event-status': $.get('event-status'),
            'match-status': $.get('match-status'),
            'probabilities': $.get('probabilities'),
            'standings': $.get('standings'),
            'team-away': $.get('team-away'),
            'team-home': $.get('team-home'),
            'processed': False,
            'title': f"{$.get('round-title')}: {$.get('round-number')} - {$.get('team-home').get('name', '')} v {$.get('team-away').get('name', '')}",
            'status': 'active'
          }
      metadata:
        document_type: "'event-summary'"
        event_code: "$.get('event_code') or $.get('param_code')"
        season_code: "$.get('season_code')"

    # update-event-schedule
    - type: "document"
      name: "update-event-schedule"
      description: "Update the events document schedule."
      condition: "$.get('event-exists') is True"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        schedule: |
          {
            **$.get('event').get('value', {}),
            'execution_count': $.get('execution_count', 0) + 1,
            'execution_time': datetime.utcnow(),
            'processing': False,
            'sport_event_status': {
              'status': $.get('event-status'),
              'match_status': $.get('match-status')
            }
          }
      metadata:
        event_code: "$.get('event_code') or $.get('param_code')"

