workflow:
  name: "workflow-sync-probabilities"
  title: "Sync Probabilities"
  description: "Workflow to synchronize a season probabilities from SportRadar API to Machina."
  context-variables:
    api-sr-soccer-v4:
      api_key: "$TEMP_CONTEXT_VARIABLE_SPORTRADAR_SOCCER_V4_API_KEY"
  inputs:
    season_id: "$.get('season_id')"
  outputs:
    probabilities: "$.get('sport_event_probabilities', None)"
    workflow-status: "$.get('should_update') is not True and 'skipped' or 'executed'"
  tasks:

    # task-check-document-timedelta
    - type: "document"
      name: "task-check-document-timedelta"
      description: "Check if the probabilities document has expired."
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      filters:
        value.sid: "$.get('season_id')"
        # value.execution: "{'$gte': datetime.utcnow() - timedelta(days=7)}"
        value.status: "'active'"
      inputs:
        name: "'probabilities'"
      outputs:
        documents: "$.get('documents')"
        should_update: "True"
        # should_update: "len($.get('documents')) == 0"

    # task-check-document-get-season
    - type: "document"
      name: "get-season"
      description: "Get the season document."
      config:
        action: "search"
        search-limit: 1
        search-vector: false
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      condition: "$.get('should_update') == True"
      filters:
        value.id: "$.get('season_id')"
      inputs:
        name: "'season'"
      outputs:
        season: "$.get('documents')[0] if $.get('documents') else None"

    # task-load-probabilities (0-199)
    - type: "connector"
      name: "task-load-probabilities-0-199"
      description: "Get a season probabilities from SportRadar"
      condition: "$.get('should_update') == True and $.get('season') is not None"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-seasons/{season_id}/{data_type}"
        command_attribute:
          season_id: "$.get('season_id')"
          data_type: "'probabilities.json'"
      inputs:
        api_key: "$.get('api_key')"
        start: "'0'"
      outputs:
        probabilities_slice_0: |
          [
            {
              **c,
              'metadata': {
                'event_code': c.get('sport_event', {}).get('id', '')
              },
              'title': f"{c.get('sport_event', {}).get('sport_event_context', {}).get('category', {}).get('name', '')} {c.get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('name', '')}: {c.get('sport_event', {}).get('sport_event_context', {}).get('round', {}).get('number', '')} - {c.get('sport_event', {}).get('competitors', [{}])[0].get('name', '')} v {c.get('sport_event', {}).get('competitors', [{}])[1].get('name', '')}",
            }
            for c in $.get('sport_event_probabilities')
          ]

    # task-load-probabilities (200-399)
    - type: "connector"
      name: "task-load-probabilities-200-399"
      description: "Get a season probabilities from SportRadar"
      condition: "$.get('should_update') == True and $.get('season') is not None"
      connector:
        name: "api-sr-soccer-v4"
        command: "get-seasons/{season_id}/{data_type}"
        command_attribute:
          season_id: "$.get('season_id')"
          data_type: "'probabilities.json'"
      inputs:
        api_key: "$.get('api_key')"
        start: "'200'"
      outputs:
        probabilities_slice_1: |
          [
            {
              **c,
              'metadata': {
                'event_code': c.get('sport_event', {}).get('id', '')
              },
              'title': f"{c.get('sport_event', {}).get('sport_event_context', {}).get('category', {}).get('name', '')} {c.get('sport_event', {}).get('sport_event_context', {}).get('season', {}).get('name', '')}: {c.get('sport_event', {}).get('sport_event_context', {}).get('round', {}).get('number', '')} - {c.get('sport_event', {}).get('competitors', [{}])[0].get('name', '')} v {c.get('sport_event', {}).get('competitors', [{}])[1].get('name', '')}",
            }
            for c in $.get('sport_event_probabilities')
          ]

    # task-update-probabilities
    - type: "document"
      name: "task-update-probabilities"
      description: "Update the probabilities document."
      condition: "$.get('should_update') == True and $.get('season') is not None"
      config:
        action: "update"
        embed-vector: false
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      documents:
        probabilities: |
          {
            'sid': $.get('season_id'),
            'data': [
              *$.get('probabilities_slice_0'),
              *$.get('probabilities_slice_1')
            ],
            'title': f"{$.get('season').get('value', {}).get('title', '')} - All Probabilities",
            'execution': datetime.utcnow(),
            'status': 'active'
          }
      metadata:
        sid: "$.get('season_id')"
        document_type: "'synchronization'"

    # bulk-save-probabilities
    - type: "document"
      name: "bulk-save-probabilities"
      condition: "$.get('should_update') == True and $.get('season') is not None"
      description: "Bulk save the probabilities."
      config:
        action: "bulk-update"
        embed-vector: false
        force-update: true
      connector:
        name: "sdk-openai"
        command: "invoke_embedding"
        model: "text-embedding-3-small"
      document_name: "probabilities"
      documents:
        items: |
          [
            *$.get('probabilities_slice_0'),
            *$.get('probabilities_slice_1')
          ]
      inputs:
        probabilities_slice_0: "$.get('probabilities_slice_0')"
        probabilities_slice_1: "$.get('probabilities_slice_1')"